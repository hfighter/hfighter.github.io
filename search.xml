<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS中NSString内存管理]]></title>
    <url>%2F2019%2F07%2F25%2FiOS%E4%B8%ADNSString%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[引言：NSString作为iOS日常开发中常用的类型，我们有必要清楚它的内存表示以及内存管理。在一个方法中定义的NSString对象是何时释放的呢？自定义的对象呢？下面我将通过demo来回答这几个问题。 下面的demo将借助UIViewController的生命周期方法viewDidLoad, viewWillAppear, viewDidAppear 方法进行。我们知道weak修饰的对象不影响其指向对象的生命周期，此处定义全局的weak对象来观察局部对象的变化过程。 1、方法中局部自定义对象的释放时机从上图可以看出，自定义对象Person在出了viewDidLoad的作用域后便释放了。NSString是否也是出了作用域就释放了呢？ 2、NSString的释放时机 字面量字符串 从上图可以看到，gstr1出了作用域后一直没有释放。详细分析发现，demo中的 str1 的 isa 是__NSCFConstantString，也就是常量字符串。我们知道常量字符串，是在常量区，程序运行期间一直存在不会被释放。那么此处没有别释放是合理的。 非常量字符串 从上图结果看到，gstr2出了作用域也一直没有被释放。此处 str2 的 isa 是NSTaggedPointerString。 NSTaggedPointerString是 TaggedPointer 的一种, 是系统用来存储较小对象，比如NSNumber，NSString，NSDate。它是一种特殊的指针，指针一部分代表存储的值，一部分来标记是TaggedPointer，本身不指向任何地址。 到此可以明白gstr2没有释放的原因是由于系统将其作为TaggedPointer存储，并没有指向内存地址。 是不是所有的NSString都是存储为TaggedPointer？很显然不是的，当NSString标识大量字符串时，NSString便存储在堆上了。那么一般多少个字符系统会用NSTaggedPointerString表示呢？ 上图可以看到，str3 的 isa 是 __NSCFString。并且 gstr3 在 viewDidLoad 结束时并没有释放，在 viewWillAppear 时仍然有值，直到 viewDidAppear 时才释放。这是什么原因呢？此处我也没有更好的办法来直接验证，不过通过运行调试Runtime源码可以发现，在当前autoreleaspool释放时，isa 为 __NSCFString 释放了。 经测试发现，一般NSString表示小于10个 ASCII字符时，系统会用NSTaggedPointerString表示字符串。 NSString 不同初始化方法的差异 从上面结果可以看出，stringWithString，initWithString创建的字符串并没有开辟新的地址空间，而是将指向了原字符串的地址，stringWithFormat，initWithFormat，当小于10 时都是NSTaggedPointerString，大于等于10的字符串的 isa 时__NSCFString开辟了新的空间。 3、总结1、iOS有3中表现形式，__NSCFConstantString，NSTaggedPointerString，__NSCFString 2、一般字面量字符串是 __NSCFConstantString；通过WithFormat生成，并且字符个数小于10个时，NSTaggedPointerString，字符个数大于等于10个时是 __NSCFString。 3、isa 是 __NSCFString 离开作用域时并不会立即释放，而是在autoreleasepool释放时释放 demo地址]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
        <tag>NSString</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS TableView和CollectionView cell添加阴影]]></title>
    <url>%2F2018%2F09%2F16%2FiOS%20TableView%E5%92%8CCollectionView%20cell%E6%B7%BB%E5%8A%A0%E9%98%B4%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[1、TableView和CollectionView cell添加阴影会发现看不到效果，主要是因为UITableViewCell 和 UICollectionViewCell 以及UITableView和UICollectionView开启了裁剪，需要显示阴影时需要关闭裁剪。 2、UITableViewCell 和 UICollectionViewCell添加阴影需要专门添加一个View图层来做阴影；然后添加一个contentview，将cell的内容添加到contentview上。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>阴影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS扩大控件的响应区域]]></title>
    <url>%2F2018%2F08%2F23%2FiOS%E6%89%A9%E5%A4%A7%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%93%8D%E5%BA%94%E5%8C%BA%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[在说如何扩大相应区域之前先来了解一下，iOS中事件的传递和响应的过程。 1、iOS中事件的传递和响应在iOS App用用户操作UI，点击页面，事件的传递和响应过程大致如下： 传递过程 UIApplication -&gt; keyWindow -&gt; UIView和UIViewController —&gt; 通过 hitTest 和 pointInside 方法来找到最佳响应触摸的view(该view可见)。 响应过程 从上一步找到的最佳view开始，反向寻找userInteractionEnabled = YES; 实现了手势 或者 touchBegin等方法的view。 过程图如下： 2、扩大控件的响应区域下面以button为例，说明如何扩大button的响应区域。 新建button的子类，重写方法 pointInside如下： 123456789101112131415161718192021222324252627282930313233@interface LargerResponseButton : UIButton@property (nonatomic, assign) UIEdgeInsets addtionalInsets;@end@interface LargerResponseButton ()@property (nonatomic, assign) CGRect largerRect;@end@implementation LargerResponseButton- (void)layoutSubviews &#123; [super layoutSubviews]; self.largerRect = CGRectMake(-self.addtionalInsets.left, -self.addtionalInsets.top, CGRectGetWidth(self.frame)+self.addtionalInsets.left+self.addtionalInsets.right, CGRectGetHeight(self.frame)+self.addtionalInsets.top+self.addtionalInsets.bottom);&#125;- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event &#123; if (CGRectContainsPoint(self.largerRect, point)) &#123; return YES; &#125; else &#123; return [super pointInside:point withEvent:event]; &#125;&#125;@end@end]]></content>
      <categories>
        <category>控件响应区</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>控件响应区</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS中copy和mutableCopy]]></title>
    <url>%2F2018%2F08%2F23%2FiOS%E4%B8%ADcopy%E5%92%8CmutableCopy%2F</url>
    <content type="text"><![CDATA[1、copy 和 mutableCopycopy和mutableCopy是iOS中对象拷贝的两种方式，区别如下： copy：浅拷贝，指针拷贝 mutableCopy： 深拷贝，内存拷贝 下面通过一个例子来理解他们的区别： 1234NSString *str = @&quot;hello&quot;;NSString *copyStr = [str copy];NSString *mcopyStr = [str mutableCopy];NSLog(@&quot;\nstr is %p\ncopyStr is %p\nmcopyStr is %p&quot;, str, copyStr, mcopyStr); 三个对象的地址如下： 123str is 0x106e0b198copyStr is 0x106e0b198mcopyStr is 0x600000456170 2、自定义对象实现copy和mutableCopy对于自定义对象如果直接调用copy和mutableCopy会出现崩溃。自定义类需实现NSCopying和NSMutableCopying协议重写copyWithZone 和 mutableCopyWithZone方法。 3、NSArray，调用copy和mutableCopyNSArray调用copy，只做了array的指针赋值过程；mutableCopy开辟了新的数组空间，那数组中的对象有没有深拷贝呢？ 123456789101112131415Person *person = [Person new];person.name = @&quot;hfighter&quot;;person.age = 20;NSArray *array = @[person];NSLog(@&quot;array is %p&quot;, array);NSLog(@&quot;array is %@&quot;, array);NSArray *copyArray = [array copy];NSLog(@&quot;copyarray is %p&quot;, copyArray);NSLog(@&quot;copyarray is %@&quot;, copyArray);NSMutableArray *mcopyArray = [array mutableCopy];NSLog(@&quot;mcopyarray is %p&quot;, newArray);NSLog(@&quot;mcopyarray is %@&quot;, newArray); 结果如下： 12345678910111213array is 0x608000011450array is ( &quot;&lt;Person: 0x608000235ac0&gt;&quot;)copyarray is 0x608000011450copyarray is ( &quot;&lt;Person: 0x608000235ac0&gt;&quot;)mcopyarray is 0x60800024e1c0mcopyarray is ( &quot;&lt;Person: 0x608000235ac0&gt;&quot;) 可以看出NSArray的mutableCopy时，array中的对象并没有进行深拷贝。同理，NSDictionary与NSArray类似。 对于，NSMutableString，NSMutableArray，NSMutableDicionary，copy和mutableCopy都是深拷贝，其中的对象并没有进行深拷贝。]]></content>
      <categories>
        <category>对象拷贝</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>对象拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS dispatch_group使用注意事项]]></title>
    <url>%2F2018%2F08%2F23%2FiOS%20dispatch_group%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[dispatch_group 经常使用在多个异步线程结束后，执行逻辑场景中。 1、dispatch_group 和 dispatch_notifiy123456789101112131415161718dispatch_group_t group = dispatch_group_create();dispatch_queue_t queue = dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);dispatch_group_async(group, queue, ^&#123; NSLog(@&quot;1&quot;);&#125;);dispatch_group_async(group, queue, ^&#123; NSLog(@&quot;2&quot;);&#125;);dispatch_group_async(group, queue, ^&#123; NSLog(@&quot;3&quot;);&#125;);dispatch_group_notify(group, queue, ^&#123; NSLog(@&quot;over&quot;);&#125;); 该逻辑能保证执行顺序为：over在1，2，3之后。 2、dispatch_ enter, dispatch_leave如果在group任务中再启动异步任务时结果是什么结果呢？如下： 123456789101112131415161718192021222324dispatch_group_t group = dispatch_group_create();dispatch_queue_t queue = dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);dispatch_group_async(group, queue, ^&#123;dispatch_async(queue, ^&#123; NSLog(@&quot;1&quot;);&#125;);&#125;);dispatch_group_async(group, queue, ^&#123;dispatch_async(queue, ^&#123; NSLog(@&quot;2&quot;);&#125;);&#125;);dispatch_group_async(group, queue, ^&#123;dispatch_async(queue, ^&#123; NSLog(@&quot;3&quot;);&#125;);&#125;);dispatch_group_notify(group, queue, ^&#123; NSLog(@&quot;over&quot;);&#125;); 这段代码不能保证over的一定在1，2，3之后执行。如何保证over在1，2，3之后执行呢？在此就需要使用到dispatch_ enter 和 dispatch_leave方法。 dispatch_enter: 标识即将进入group，group中的任务数加1； dispatch_leave: 标识任务即将离开group，group中的任务数减1 12345678910111213141516171819202122232425262728293031dispatch_group_t group = dispatch_group_create();dispatch_queue_t queue = dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);dispatch_queue_t queue1 = dispatch_queue_create(&quot;queue1&quot;, DISPATCH_QUEUE_CONCURRENT);dispatch_group_enter(group);dispatch_group_async(group, queue, ^&#123;dispatch_async(queue1, ^&#123; NSLog(@&quot;1&quot;);dispatch_group_leave(group);&#125;);&#125;);dispatch_group_enter(group);dispatch_group_async(group, queue, ^&#123;dispatch_async(queue1, ^&#123; NSLog(@&quot;2&quot;);dispatch_group_leave(group);&#125;);&#125;);dispatch_group_enter(group);dispatch_group_async(group, queue, ^&#123;dispatch_async(queue1, ^&#123; NSLog(@&quot;3&quot;);dispatch_group_leave(group);&#125;);&#125;);dispatch_group_notify(group, queue, ^&#123; NSLog(@&quot;over&quot;);&#125;);]]></content>
      <categories>
        <category>GCD</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>GCD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xcode编译过程]]></title>
    <url>%2F2018%2F08%2F08%2FXcode%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[一般程序的编译过程分为以下几个步骤：1、预处理(预编译) 2、编译 3、链接 4、生成可执行文件 Xcode编译过程页类似，还有一些特有步骤，如下：1、预编译，主要是替换include和宏等 2、编译 3、链接，链接工程中依赖的framework和.a 4、拷贝资源(图片，字体，strings等)和编译xib，storyboard，assetxib编译生成nib文件；storyboard编译生成nib+plist文件；asset编译生成car文件 5、Process info.plist文件 6、Touch app文件 7、Process product packaging(Copy Swift standard libraries（可选）) 8、app sign(包签名) 9、validate app(连接真机编译) 如果工程依赖于其它target会优先编译依赖的target。这些过程可以在Xcode中查看：]]></content>
      <categories>
        <category>编译</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XX-Net3.12.10以上版本 start失败解决]]></title>
    <url>%2F2018%2F08%2F07%2FXX-Net3.12.10%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC%20start%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[针对XX-Net3.12.10以上版本 start失败，提示Run XX-Net in background. 主要原因是XX-Net基于Python2.7运行，如果本地安装了Ptyhon3，导致运行失败。解决方法：用一下内容替换start文件中的内容(https://github.com/XX-net/XX-Net/raw/mac-patch/start) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198#!/bin/shpath_to_script () &#123; TARGET=&quot;$1&quot; BASENAME=&quot;$(basename &quot;$TARGET&quot;)&quot; ( cd -P &quot;$(dirname &quot;$TARGET&quot;)&quot; if [ -h &quot;$BASENAME&quot; ] then path_to_script &quot;$(readlink &quot;$BASENAME&quot;)&quot; else echo &quot;$PWD&quot; fi )&#125;goto_script_path() &#123; PATH_TO_SCRIPT=&quot;$(path_to_script &quot;$0&quot;)&quot; # XX-Net fails to start if the install path contains spaces, so it must be quoted. cd &quot;$PATH_TO_SCRIPT&quot;&#125;goto_script_pathif python -V 2&gt;&amp;1| grep -q &quot;Python 3&quot; ;then PYTHON=&quot;python2&quot;else PYTHON=&quot;python&quot;fiif [ -f code/version.txt ]; then VERSION=`cat code/version.txt`else VERSION=&quot;default&quot;fiif [ ! -f &quot;code/$VERSION/launcher/start.py&quot; ]; then VERSION=&quot;default&quot;fiREAL_VERSION=`cat code/$VERSION/version.txt`echo &quot;XX-Net version:$REAL_VERSION&quot;# launch xx-net service by ignore hungup signallaunchWithNoHungup() &#123; nohup $&#123;PYTHON&#125; code/$&#123;VERSION&#125;/launcher/start.py $@&gt;/dev/null 2&gt;&amp;1 &amp;&#125;# launch xx-net service by hungup signallaunchWithHungup() &#123; $&#123;PYTHON&#125; code/$&#123;VERSION&#125;/launcher/start.py $@&#125;# check command avalibilityhas_command() &#123; &quot;$1&quot; -v $1 &gt; /dev/null 2&gt;&amp;1&#125;openwrt_setup_env()&#123; echo &quot;It is OpenWrt.&quot; #TODO: Setup # check mount usb disk # install python, python-openssl, ipset to usb device # setup dns # set auto start echo &quot;It is openwrt.&quot;&#125;# Install Packages# get operating system nameos_name=`uname -s`if [ $os_name = &apos;Linux&apos; ]; then if has_command opkg; then openwrt_setup_env elif ! $&#123;PYTHON&#125; -c &apos;import OpenSSL&apos; 2&gt; /dev/null; then echo &apos;Installing pyOpenSSL for your system... Please type in your password if requested&apos; if has_command zypper; then # openSUSE sudo zypper in -y python-pyOpenSSL elif has_command apt-get; then # Debian or Debian-like sudo apt-get install -y python-openssl python-pycparser elif has_command dnf; then # Fedora sudo dnf install -y pyOpenSSL elif has_command yum; then # RedHat sudo yum install -y pyOpenSSL elif has_command pacman; then # ArchLinux sudo pacman -S --noconfirm openssl python2-pyopenssl elif has_command opkg; then # OpenWrt echo &quot;install python&quot; opkg --dest usb install python fi fifihelp()&#123;echo &quot;USAGE:start -h show help.start -allow_remote enable remote connect. -hungup start with nohup to run in background.start set_iptables [interface] set iptables for transparent proxy. interface The network interface which will be redirected Default is br-lanstart unset_iptables [interface]&quot;exit 0&#125;set_iptables()&#123; if [ &quot;$1&quot; = &apos;&apos; ]; then INF=&quot;br-lan&quot; else INF=$1 fi echo &quot;set interface $INF&quot; # TODO: check if rule exist iptables -t nat -N REDSOCKS iptables -t nat -A REDSOCKS -d 0.0.0.0/8 -j RETURN iptables -t nat -A REDSOCKS -d 10.0.0.0/8 -j RETURN iptables -t nat -A REDSOCKS -d 127.0.0.0/8 -j RETURN iptables -t nat -A REDSOCKS -d 169.254.0.0/16 -j RETURN iptables -t nat -A REDSOCKS -d 172.16.0.0/12 -j RETURN iptables -t nat -A REDSOCKS -d 192.168.0.0/16 -j RETURN iptables -t nat -A REDSOCKS -d 224.0.0.0/4 -j RETURN iptables -t nat -A REDSOCKS -d 240.0.0.0/4 -j RETURN iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 8086 iptables -t nat -A PREROUTING --in-interface $INF -p tcp -j REDSOCKS exit 0&#125;unset_iptables()&#123; if [ &quot;$1&quot; = &apos;&apos; ]; then INF=&quot;br-lan&quot; else INF=$1 fi iptables -t nat -D PREROUTING --in-interface $INF -p tcp -j REDSOCKS iptables -t nat -X REDSOCKS&#125;ARGS=$@HANGUP=&apos;0&apos;while [ -n &quot;$1&quot; ]; docase $1 in-h) help;shift 1;;-allow_remote)shift 1;;-hungup)HANGUP=&apos;1&apos;;shift 1;;set_iptables) set_iptables $2;;unset_iptables) unset_iptables $2;;*) echo &quot;unknown option $1.&quot;; shift 1;;esacdone# Start Applicationif [ $os_name = &apos;Darwin&apos; ] &amp;&amp; ! [ $HANGUP = &apos;1&apos; ]; then echo &quot;Run XX-Net in background.&quot; PYTHON=&quot;/usr/bin/python2.7&quot; launchWithNoHungup $ARGSelse launchWithHungup $ARGSfi]]></content>
      <categories>
        <category>XX-Net</category>
      </categories>
      <tags>
        <tag>XX-Net</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github国内访问慢的问题解决方法]]></title>
    <url>%2F2018%2F08%2F06%2Fgithub%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在国内访问github经常会出现特别的慢，下面的方法可以在一定程度上加快对github的访问速度。具体操作步骤如下： 1、获取Github相关网站的IP在https://www.ipaddress.com中查找，github.global.ssl.fastly.net和github.com的ip地址 2、修改本地host文件以Mac为例，命令行下输入：sudo vi /etc/host，增加增加github.global.ssl.fastly.net和github.com的映射，如： 12151.101.13.194 github.global.ssl.fastly.net 192.30.253.112 github.com 3、更新DNS缓存命令行输入：sudo dscacheutil -flushcache，使增加的映射生效。]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对象&类&类别]]></title>
    <url>%2F2018%2F08%2F06%2F%E5%AF%B9%E8%B1%A1%26%E7%B1%BB%26%E7%B1%BB%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1、对象在objc.h文件中可以发现对象的定义如下： 123struct objc_object &#123; Class _Nonnull isa OBJC_ISA_AVAILABILITY; // 标明所属的类&#125;; 可能大家会有疑问，如果类中包含属性或者成员变量时，对象的结构会是什么样的？断点调试时可以发现对象不仅仅包含isa，还有成员列表(ivar)。 2、类在runtime.h文件可以发现类的定义如下： 12345678910111213141516struct objc_class &#123; Class _Nonnull isa OBJC_ISA_AVAILABILITY;#if !__OBJC2__ Class _Nullable super_class OBJC2_UNAVAILABLE; const char * _Nonnull name OBJC2_UNAVAILABLE; long version OBJC2_UNAVAILABLE; long info OBJC2_UNAVAILABLE; long instance_size OBJC2_UNAVAILABLE; struct objc_ivar_list * _Nullable ivars OBJC2_UNAVAILABLE; struct objc_method_list * _Nullable * _Nullable methodLists OBJC2_UNAVAILABLE; struct objc_cache * _Nonnull cache OBJC2_UNAVAILABLE; struct objc_protocol_list * _Nullable protocols OBJC2_UNAVAILABLE;#endif&#125; OBJC2_UNAVAILABLE; 3、类别在runtime.h文件中只能看到类别的声明，不能看到具体的定义 1typedef struct objc_category *Category; 通过命令 clang -rewrite-objc xxxx.m 将类别生成.cpp文件，可以发现类别结构如下： 12345678struct _category_t &#123; const char *name; struct _class_t *cls; const struct _method_list_t *instance_methods; const struct _method_list_t *class_methods; const struct _protocol_list_t *protocols; const struct _prop_list_t *properties;&#125;; 生成的cpp文件中还有其他一些结构如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556struct _prop_t &#123; const char *name; const char *attributes;&#125;;struct _protocol_t;struct _objc_method &#123; struct objc_selector * _cmd; const char *method_type; void *_imp;&#125;;struct _protocol_t &#123; void * isa; // NULL const char *protocol_name; const struct _protocol_list_t * protocol_list; // super protocols const struct method_list_t *instance_methods; const struct method_list_t *class_methods; const struct method_list_t *optionalInstanceMethods; const struct method_list_t *optionalClassMethods; const struct _prop_list_t * properties; const unsigned int size; // sizeof(struct _protocol_t) const unsigned int flags; // = 0 const char ** extendedMethodTypes;&#125;;struct _ivar_t &#123; unsigned long int *offset; // pointer to ivar offset location const char *name; const char *type; unsigned int alignment; unsigned int size;&#125;;struct _class_ro_t &#123; unsigned int flags; unsigned int instanceStart; unsigned int instanceSize; unsigned int reserved; const unsigned char *ivarLayout; const char *name; const struct _method_list_t *baseMethods; const struct _objc_protocol_list *baseProtocols; const struct _ivar_list_t *ivars; const unsigned char *weakIvarLayout; const struct _prop_list_t *properties;&#125;;struct _class_t &#123; struct _class_t *isa; struct _class_t *superclass; void *cache; void *vtable; struct _class_ro_t *ro;&#125;;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git环境搭建]]></title>
    <url>%2F2018%2F07%2F30%2Fgit%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[1、安装homebrew 或者 直接下载安装cakebrew 安装homebrew 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装cakebrew 2、git安装 brew install git 3、拉取代码前需要根据github或者gitlab账号生成ssh-key,然后将生成的.pub中的内容拷贝到github或者gitlib的ssh key中 1、生成ssh-key 12cd ~/.sshssh-keygen -t rsa -C &quot;邮箱账号&quot; 此步骤会生成公钥和私钥，将公钥(xxx.pub)中的内容拷贝到ssh key中 2、将密钥加入ssh-agent缓存中参考 12cd ~/.sshssh-add -K xxx（私钥） 至此git环境已经配置完成，可以通过git clone来克隆代码 4、如果mac中同时存在github和gitlab的key需要作区分，新版的mac系统每次重启后都需要重新执行ssh-add比较麻烦， 解决方法如下： 1、cd ~/.ssh 2、touch config 3、配置文件 1234567891011121314151617# githubHost github.comHostName github.comUser youremail.com //github对应的emailIdentityFile ~/.ssh/id_rsa_github //github对应的私钥# coding.netHost git.coding.netHostName git.coding.netUser youremail.com //coding对应的emailIdentityFile ~/.ssh/blog //coding对应的私钥# gitlabHost gitlab.comHostNmae gitlab.comUser youremail.com //coding对应的emailIdentityFile ~/.ssh/id_rsa //coding对应的私钥 注意：Host和HostNmae必须一样]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XX-Net 是在国内能够访问Google的一种方式]]></title>
    <url>%2F2017%2F07%2F11%2FXXNet%E8%AE%BF%E9%97%AEGoogle%2F</url>
    <content type="text"><![CDATA[一、XX-Net 是在国内能够访问Google的一种方式。二、配置XX-Net大致需要以下几个步骤 1、Google账号(Google邮箱账号)，此步骤比较简单，在此不做说明 2、下载XX-Net👉猛戳，然后安装，安装步骤👉猛戳 3、在Google上创建AppId，步骤👉猛戳 4、部署服务端，步骤👉猛戳 的下半文 5、其它参考👉猛戳 三、针对以上步骤做以下说明：1、建议先进行第2步，再进行第3步；由于创建AppId需要访问Google，先安装上XX-Net后，XX-Net自带公用账号，可以访问Google尽管速度慢点😊；2、对于创建AppId，由于访问比较慢可能费时一些；创建Id地址👉猛戳 ；设置AppID的App引擎👉猛戳选择刚创建的Id3、设置弱网应用许可👉猛戳4、设置应用专用密码👉猛戳5、部署服务端，Windows部署相对简单参考文档可以部署成功，Mac参考文档部署不成功，遇到问题可以参考👉猛戳 and👉猛戳；Mac下部署我使用的是命令部署的，具体命令如下: 四、共享电脑的vpn给手机共享电脑VPN给手机，具体步骤如下，参考👉猛戳： 1、将xx-net\code\default\gae_proxy\local\proxy.ini 内容复制\data\gae_proxy\config.ini中并修改config.ini中 12345678910[pac]enable = 1ip = 0.0.0.0port = 8086file = proxy.pac[listen]ip = 0.0.0.0port = 8087visible = 1debuginfo = 0 2、手机安装证书，将XX-Net中的CA.crt，发送到邮箱，然后在手机查看邮件安装 3、打开XX-Net系统配置 允许远程连接Web控制端，重启XX-Net 4、手机端设置代理，HTTP代理选择自动，URL填写：http://电脑ip:8086/proxy.pac]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>技巧</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
</search>
